A big thank you to: <a href="http://www.devpro.it/JSON/files/JSTONE-js.html">Andrea Giammarchi</a>, <a href="http://www.thomasfrank.se/sessionvars.html">Thomas Frank</a>, <a href="http://www.sitepen.com/blog/2008/07/22/windowname-transport/">Kris Zyp</a> and <a href="http://friedcellcollective.net/outbreak/jsjquerywindownameplugin/">Marko Mrdjenovič</a>


The logic is a follow:

We have the main page that needs to fetch a JSONP. An example can be found at http://beebole.com/sandbox/callerPage.html

Now here's the trick. You need to own another domain name. We place the sandbox page "index.html" in the root of this domain. There is an example at http://beebole-sandbox.com/index.html. I haven't played with document.domain and 2 subdomains, may be that could do the trick too. The 2 domains can point to the same server.

We open an iframe in the main page pointing to the sandbox page: http://beebole-sandbox.com/index.html with 2 parameters: _url_ and _local_

The first parameter sent to the sandbox page is the API url ( _url_ ). When the page loads, a script is injected with its source pointing to this API url.

When the script is loaded, by the JSONP logic it calls a callback function. This function sets the value of window.name to the JSON received and converted as a text. At this stage the window.name contains our JSON. But since it is from the domain http://beebole-sandbox.com we can't read it from http://beebole.com by the Same Origin Policy concept.

Now comes the Kris Zyp's idea to read window.name. We change the location back to the domain of the main page. We do that from the sandbox page with the second parameter received ( _local_ ). In our example we take the same index.html page but from the main domain: http://beebole.com/sandbox/index.html. Marko Mrdjenovič, in its jQuery implementation tries to get /robot.txt or /crossdomain.xml which are common files found in the root of web servers. Any existing local file is ok.

An onload event is fired in our main page. The location has been changed to a local url, so we can now access the window.name of that iframe and read/parse the JSON.

A malicious script should(?) only be able to make damage to the sandbox page which is empty and removed as it is loaded. And as long as you do not eval directly the text but use a JSON parser  that will get only json text and reject the rest, your main page shouldn't be hurt either.

For now we are happy with just JSONP/GET. POST, DELETE could be done too. But I guess this would imply platform dependent pages on the server.
If you have ideas, please fork the repository at http://github.com/beebole/sandbox